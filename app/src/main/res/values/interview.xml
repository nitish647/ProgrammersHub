<?xml version="1.0" encoding="utf-8"?>

<resources>
    <string-array name="csharp_interview">
        <item>Q 1) What is an Object and a Class?</item>
        <item>Q 2) What are the fundamental OOP concepts?</item>
        <item>Q 3) What is Managed and Unmanaged code?</item>
        <item>Q 4) What is an Interface?</item>
        <item>Q 5) What are the different types of classes in C#?</item>
        <item>Q 6) Explain code compilation in C#.</item>
        <item>Q 7) What are the differences between a Class and a Struct?</item>
        <item>Q 8) What is the difference between the Virtual method and the Abstract method?</item>
        <item>Q 9) Explain Namespaces in C#.</item>
        <item>Q 10) What is “using” statement in C#?</item>
        <item>Q 11) Explain Abstraction.</item>
        <item>Q 12) Explain Polymorphism?</item>
        <item>Q 13) How is Exception Handling implemented in C#?</item>
        <item>Q 14) What are C# I/O classes? What are the commonly used I/O classes?</item>
        <item>Q 15) What is StreamReader/StreamWriter class?</item>
        <item>Q 16) What is a Destructor in C#?</item>
        <item>Q 17) What is an Abstract Class?</item>
        <item>Q 18) What are Boxing and Unboxing?</item>
        <item>Q 19) What is the difference between Continue and Break Statement?</item>
        <item>Q 20) What is the difference between finally and finalize block?</item>
        <item>Q 21) What is an Array? Give the syntax for a single and multi-dimensional array?</item>
        <item>Q 22) What is a Jagged Array?</item>
        <item>Q 23) Name some properties of Array.</item>
        <item>Q 24) What is an Array Class?</item>
        <item>Q 25) What is a String? What are the properties of a String Class?</item>
        <item>Q 26) What is an Escape Sequence? Name some String escape sequences in C#.</item>
        <item>Q 27) What are Regular expressions? Search a string using regular expressions?</item>
        <item>Q 28) What are the basic String Operations? Explain.</item>
        <item>Q 29) What is Parsing? How to Parse a Date Time String?</item>
        <item>Q 30) What is a Delegate? Explain.</item>
        <item>Q 31) What are Events?</item>
        <item>Q 32) How to use Delegates with Events?</item>
        <item>Q 33) What are the different types of Delegates?</item>
        <item>Q 34) What do Multicast Delegates mean?</item>
        <item>Q 35) Explain Publishers and Subscribers in Events.</item>
        <item>Q 36) What are Synchronous and Asynchronous operations?</item>
        <item>Q 37) What is Reflection in C#?</item>
        <item>Q 38) What is a Generic Class?</item>
        <item>Q 39) Explain Get and Set Accessor properties?</item>
        <item>Q 40) What is a Thread? What is Multithreading?</item>
        <item>Q 41) Name some properties of Thread Class.</item>
        <item>Q 42) What are the different states of a Thread?</item>
        <item>Q 43) What are Async and Await?</item>
        <item>Q 44) What is a Deadlock?</item>
        <item>Q 45) Explain Lock, Monitors, and Mutex Object in Threading.</item>
        <item>Q 46) What is a Race Condition?</item>
        <item>Q 47) What is Thread Pooling?</item>
        <item>Q 48) What is Serialization?</item>
        <item>Q 49) What are the types of Serialization?</item>
        <item>Q 50) What is an XSD file?</item>
    </string-array>
    <string-array name="swift_interview">
        <item>Q 1) What is iOS Swift?</item>
        <item>Q 2) What are the advantages of using Swift?</item>
        <item>Q 3) Explain Swift vs Objective-C.</item>
        <item>Q 4) Where can we test the apple iPhone apps if we don’t have an iOS device?</item>
        <item>Q 5) What are the tools that are required to develop iOS applications?</item>
        <item>Q 6) What are the most important features of swift?</item>
        <item>Q 7) Explain the common execution states for a swift iOS App (iOS Application Lifecycle).</item>
        <item>Q 8) Is Swift an object-oriented programming language?</item>
        <item>Q 9) What type of objects are basic data types in swift?</item>
        <item>Q 10) What is init() in Swift?</item>
        <item>Q 11) What are the control transfer statements that are used in iOS swift?</item>
        <item>Q 12) What is the difference between Let and Var in swift?</item>
        <item>Q 13) How to add an element into an Array?</item>
        <item>Q 14) Which JSON framework is supported by iOS?</item>
        <item>Q 15) What is PLIST in iOS?</item>
        <item>Q 16) What is a dictionary?</item>
        <item>Q 17) What is a Protocol in swift?</item>
        <item>Q 18) What is a delegate in swift?</item>
        <item>Q 19) What is the use of double question mark “??” in swift?</item>
        <item>Q 20) What is a GUARD statement? What is the benefit of using the GUARD statement in swift?</item>
        <item>Q 21) What are the collection types that are available in swift?</item>
        <item>Q 22) What is “defer”?</item>
        <item>Q 23) What is Tuple? How to create a Tuple in swift?</item>
        <item>Q 24) What is the difference between Array and NSArray?</item>
        <item>Q 25) What is the difference between class and structure?</item>
        <item>Q 26) What are the best ways of achieving concurrency in iOS?</item>
        <item>Q 27) How to create a constant in Swift programming?</item>
        <item>Q 28) How to pass the data between view controllers?</item>
        <item>Q 29) How can we define a base class in swift?</item>
        <item>Q 30) How can we make a property Optional in swift?</item>
        <item>Q 31) Who calls the main function of our app during the app launch cycle?</item>
        <item>Q 32) What are UI elements?</item>
        <item>Q 33) Which is the superclass of all the view controller objects?</item>
        <item>Q 34) What are the new feature in Swift 4.0?</item>
        <item>Q 35) How to write a multiple line comment in swift?</item>
        <item>Q 36) What are the source items used by Xcode?</item>
        <item>Q 37) What are the different ways to pass data in swift?</item>
        <item>Q 38) Explain the usage of Class and benefits of Inheritance.</item>
        <item>Q 39) Explain some Common features of Protocols and Superclasses.</item>
        <item>Q 40) Explain some biggest changes in UserNotifications.</item>
        <item>Q 41) What is Optional chaining?</item>
        <item>Q 42) What is Optional binding?</item>
        <item>Q 43) What are the Higher-Order functions in swift?</item>
        <item>Q 44) Explain some design patterns which we normally use during the app development.</item>
        <item>Q 45) What are the various ways to unwrap an optional in swift?</item>
        <item>Q 46) What mechanism does iOS support for multi-threading?</item>
        <item>Q 47) What is Swift module?</item>
        <item>Q 48) Explain Core Data.</item>
        <item>Q 49) Explain the Grand Central Dispatch (GDC).</item>
        <item>Q 50) Explain MVC structure.</item>
    </string-array>
<string-array name="javascript_interview">
    <item>Ques 1: What are the possible ways to create objects in JavaScript?</item>
    <item>Ques 2: What is prototype chain?</item>
    <item>Ques 3: What is the difference between Call, Apply and Bind?</item>
    <item>Ques 4: What is JSON and its common operations?</item>
    <item>Ques 5: What is the purpose of array slice method?</item>
    <item>Ques 6: What is the purpose of array splice method?</item>
    <item>Ques 7: What is the difference between slice and splice?</item>
    <item>Ques 8: How do you compare Object and Map?</item>
    <item>Ques 9: What is the difference between == and === operators?</item>
    <item>Ques 10: What are lambda or arrow functions?</item>
    <item>Ques 11: What is a first class function?</item>
    <item>Ques 12: What is a first order function?</item>
    <item>Ques 13: What is a higher order function?</item>
    <item>Ques 14: What is a unary function?</item>
    <item>Ques 15: What is currying function?</item>
    <item>Ques 16: What is a pure function?</item>
    <item>Ques 17: What is the purpose of let keyword?</item>
    <item>Ques 18: What is the difference between let and var?</item>
    <item>Ques 19: What is the reason to choose the name let as keyword?</item>
    <item>Ques 20: How do you redeclare variables in switch block without an error?</item>
    <item>Ques 21: What is Temporal Dead Zone?</item>
    <item>Ques 22: What is IIFE(Immediately Invoked Function Expression)?</item>
    <item>Ques 23: What is the benefit of using modules?</item>
    <item>Ques 24: What is memoization?</item>
    <item>Ques 25: What is Hoisting?</item>
    <item>Ques 26: What are classes in ES6?</item>
    <item>Ques 27: What are closures?</item>
    <item>Ques 28: What are modules?</item>
    <item>Ques 29: Why do you need modules?</item>
    <item>Ques 30: What is scope in javascript?</item>
    <item>Ques 31: What is a service worker?</item>
    <item>Ques 32: How do you manipulate DOM using service worker?</item>
    <item>Ques 33: How do you reuse information across service worker restarts?</item>
    <item>Ques 34: What is IndexedDB?</item>
    <item>Ques 35: What is web storage?</item>
    <item>Ques 36: What is a post message?</item>
    <item>Ques 37: What is a Cookie?</item>
    <item>Ques 38: Why do you need a Cookie?</item>
    <item>Ques 39: What are the options in a cookie?</item>
    <item>Ques 40: How do you delete a cookie?</item>
    <item>Ques 41: What are the differences between cookie, local storage and session storage?</item>
    <item>Ques 42: What is the main difference between localStorage and sessionStorage?</item>
    <item>Ques 43: How do you access web storage?</item>
    <item>Ques 44: What are the methods available on session storage?</item>
    <item>Ques 45: What is a storage event and its event handler?</item>
    <item>Ques 46: Why do you need web storage?</item>
    <item>Ques 47: How do you check web storage browser support?</item>
    <item>Ques 48: How do you check web workers browser support?</item>
    <item>Ques 49: Give an example of web worker?</item>
    <item>Ques 50: What are the restrictions of web workers on DOM?</item>
    <item>Ques 51: What is a promise?</item>
    <item>Ques 52: Why do you need a promise?</item>
    <item>Ques 53: What are the three states of promise?</item>
    <item>Ques 54: What is a callback function?</item>
    <item>Ques 55: Why do we need callbacks?</item>
    <item>Ques 56: What is a callback hell?</item>
    <item>Ques 57: What is server-sent events?</item>
    <item>Ques 58: How do you receive server-sent event notifications?</item>
    <item>Ques 59: How do you check browser support for server-sent events?</item>
    <item>Ques 60: What are the events available for server sent events?</item>
    <item>Ques 61: What are the main rules of promise?</item>
    <item>Ques 62: What is callback in callback?</item>
    <item>Ques 63: What is promise chaining?</item>
    <item>Ques 64: What is promise.all?</item>
    <item>Ques 65: What is the purpose of race method in promise?</item>
    <item>Ques 66: What is a strict mode in javascript?</item>
    <item>Ques 67: Why do you need strict mode?</item>
    <item>Ques 68: How do you declare strict mode?</item>
    <item>Ques 69: What is the purpose of double exclamation?</item>
    <item>Ques 70: What is the purpose of delete operator?</item>
    <item>Ques 71: What is typeof operator?</item>
    <item>Ques 72: What is undefined property?</item>
    <item>Ques 73: What is null value?</item>
    <item>Ques 74: What is the difference between null and undefined?</item>
    <item>Ques 75: What is eval?</item>
    <item>Ques 76: What is the difference between window and document?</item>
    <item>Ques 77: How do you access history in javascript?</item>
    <item>Ques 78: What are the javascript data types?</item>
    <item>Ques 79: What is isNaN?</item>
    <item>Ques 80: What are the differences between undeclared and undefined variables?</item>
    <item>Ques 81: What are global variables?</item>
    <item>Ques 82: What are the problems with global variables?</item>
    <item>Ques 83: What is NaN property?</item>
    <item>Ques 84: What is the purpose of isFinite function?</item>
    <item>Ques 85: What is an event flow?</item>
    <item>Ques 86: What is event bubbling?</item>
    <item>Ques 87: What is event capturing?</item>
    <item>Ques 88: How do you submit a form using JavaScript?</item>
    <item>Ques 89: How do you find operating system details?</item>
    <item>Ques 90: What is the difference between document load and DOMContentLoaded events?</item>
    <item>Ques 91: What is the difference between native, host and user objects?</item>
    <item>Ques 92: What are the tools or techniques used for debugging JavaScript code?</item>
    <item>Ques 93: What are the pros and cons of promises over callbacks?</item>
    <item>Ques 94: What is the difference between an attribute and a property?</item>
    <item>Ques 95: What is same-origin policy?</item>
    <item>Ques 96: What is the purpose of void 0?</item>
    <item>Ques 97: Is JavaScript a compiled or interpreted language?</item>
    <item>Ques 98: Is JavaScript a case-sensitive language?</item>
    <item>Ques 99: Is there any relation between Java and JavaScript?</item>
    <item>Ques 100: What are events?</item>
    <item>Ques 101: Who created javascript?</item>
    <item>Ques 102: What is the use of preventDefault method?</item>
    <item>Ques 103: What is the use of stopPropagation method?</item>
    <item>Ques 104: What are the steps involved in return false usage?</item>
    <item>Ques 105: What is BOM?</item>
    <item>Ques 106: What is the use of setTimeout?</item>
    <item>Ques 107: What is the use of setInterval?</item>
    <item>Ques 108: Why is JavaScript treated as Single threaded?</item>
    <item>Ques 109: What is an event delegation?</item>
    <item>Ques 110: What is ECMAScript?</item>
    <item>Ques 111: What is JSON?</item>
    <item>Ques 112: What are the syntax rules of JSON?</item>
    <item>Ques 113: What is the purpose JSON stringify?</item>
    <item>Ques 114: How do you parse JSON string?</item>
    <item>Ques 115: Why do you need JSON?</item>
    <item>Ques 116: What are PWAs?</item>
    <item>Ques 117: What is the purpose of clearTimeout method?</item>
    <item>Ques 118: What is the purpose of clearInterval method?</item>
    <item>Ques 119: How do you redirect new page in javascript?</item>
    <item>Ques 120: How do you check whether a string contains a substring?</item>
    <item>Ques 121: How do you validate an email in javascript?</item>
    <item>Ques 122: The above regular expression regular accepts unicode characters.</item>
    <item>Ques 123: What are the various url properties of location object?</item>
    <item>Ques 124: How do get query string values in javascript?</item>
    <item>Ques 125: How do you check if a key exists in an object?</item>
    <item>Ques 126: How do you loop through or enumerate javascript object?</item>
    <item>Ques 127: How do you test for an empty object?</item>
    <item>Ques 128: What is an arguments object?</item>
    <item>Ques 129: How do you make first letter of the string in an uppercase?</item>
    <item>Ques 130: What are the pros and cons of for loop?</item>
    <item>Ques 131: How do you display the current date in javascript?</item>
    <item>Ques 132: How do you compare two date objects?</item>
    <item>Ques 133: How do you check if a string starts with another string?</item>
    <item>Ques 134: How do you trim a string in javascript?</item>
    <item>Ques 135: How do you add a key value pair in javascript?</item>
    <item>Ques 136: Is the \!\-\- notation represents a special operator?</item>
    <item>Ques 137: How do you assign default values to variables?</item>
    <item>Ques 138: How do you define multiline strings?</item>
    <item>Ques 139: What is an app shell model?</item>
    <item>Ques 140: Can we define properties for functions?</item>
    <item>Ques 141: What is the way to find the number of parameters expected by a function?</item>
    <item>Ques 142: What is a polyfill?</item>
    <item>Ques 143: What are break and continue statements?</item>
    <item>Ques 144: What are js labels?</item>
    <item>Ques 145: What are the benefits of keeping declarations at the top?</item>
    <item>Ques 146: What are the benefits of initializing variables?</item>
    <item>Ques 147: What are the recommendations to create new object?</item>
    <item>Ques 148: How do you define JSON arrays?</item>
    <item>Ques 149: How do you generate random integers?</item>
    <item>Ques 150: Can you write a random integers function to print integers with in a range?</item>
</string-array>
<string-array name="c_interview">

    <item>1) How do you construct an increment statement or decrement statement in C?</item>
    <item>2) What is the difference between Call by Value and Call by Reference?</item>
    <item>3) Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?</item>
    <item>4) What is the equivalent code of the following statement in WHILE LOOP format?
 \n for (a=1; a&lt; =100; a++)

 \n printf ("%d"\\n", a * a);
    </item>
    <item>5) What is a stack?</item>
    <item>6) What is a sequential access file?</item>
    <item>7) What is variable initialization and why is it important?</item>
    <item>8 What is spaghetti programming?</item>
    <item>9) Differentiate Source Codes from Object Codes</item>
    <item>10) In C programming, how do you insert quote characters ("'" and \") into the output screen?</item>
    <item>11) What is the use of a \\0 character?</item>
    <item>12) What is the difference between the = symbol and == symbol?</item>
    <item>13) What is the modulus operator?</item>
    <item>14) What is a nested loop?</item>
    <item>15) Which of the following operators is incorrect and why? ( >=, &lt;=, &lt;>, ==)</item>
    <item>16) Compare and contrast compilers from interpreters.</item>
    <item>17) How do you declare a variable that will hold string values?</item>
    <item>18) Can the curly brackets { } be used to enclose a single line of code?</item>
    <item>19) What are header files and what are its uses in C programming?</item>
    <item>20) What is syntax error?</item>
    <item>21) What are variables and it what way is it different from constants?</item>
    <item>22) How do you access the values within an array?</item>
    <item>23) Can I use  "int" data type to store the value 32768? Why?</item>
    <item>24) Can two or more operators such as \\n and \\t be combined in a single line of program code?</item>
    <item>25) Why is it that not all header files are declared in every C program?</item>
    <item>26) When is the "void" keyword used in a function?</item>
    <item>27) What are compound statements?</item>
    <item>28) What is the significance of an algorithm to C programming?</item>
    <item>29) What is the advantage of an array over individual variables?</item>
    <item>30) Write a loop statement that will show the following output:
    \n1
    \n12
    \n123
     \n1234
     \n12345</item>
    <item>31) What is wrong in this statement?  scanf("%d",whatnumber);</item>
    <item>32) How do you generate random numbers in C?</item>
    <item>33) What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?</item>
    <item>34) What are comments and how do you insert it in a C program?</item>
    <item>35) What is debugging?</item>
    <item>36) What does the &amp;&amp; operator do in a program code?</item>
    <item>37) In C programming, what command or code can be used to determine if a number of odd or even?</item>
    <item>38) What does the format %10.2 mean when included in a printf statement?</item>
    <item>39) What are logical errors and how does it differ from syntax errors?</item>
    <item>40) What are the different types of control structures in programming?</item>
    <item>41) What is || operator and how does it function in a program?</item>
    <item>42) Can the "if" function be used in comparing strings?</item>
    <item>43) What are preprocessor directives?</item>
    <item>44) What will be the outcome of the following conditional statement if the value of variable s is 10?
      s >=10 &amp;&amp; s &lt; 25 &amp;&amp; s!=12</item>

    <item>45) Describe the order of precedence with regards to operators in C.</item>
    <item>46) What is wrong with this statement? myName = \"Robin\";</item>
    <item>47) How do you determine the length of a string value that was stored in a variable?</item>
    <item>48) Is it possible to initialize a variable at the time it was declared?</item>
    <item>49) Why is C language being considered a middle level language?</item>
    <item>50) What are the different file extensions involved when programming in C?</item>
    <item>51) What are reserved words?</item>
    <item>52) What are linked list?</item>
    <item>53) What is FIFO?</item>
    <item>54) What are binary trees?</item>
    <item>55) Not all reserved words are written in lowercase. TRUE or FALSE?</item>
    <item>56) What is the difference between the expression "++a"  and "a++"?</item>
    <item>57) What would happen to X in this expression: X += 15;  (assuming the value of X is 5)</item>
    <item>58) In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?</item>
    <item>59) What is an endless loop?</item>
    <item>60) What is a program flowchart and how does it help in writing a program?</item>
    <item>61) What is wrong with this program statement? void = 10;</item>
    <item>62) Is this program statement valid? INT = 10.50;</item>
    <item>63) What are actual arguments?</item>
    <item>64) What is a newline escape sequence?</item>
    <item>65) What is output redirection?</item>
    <item>66) What are run-time errors?</item>
    <item>67) What is the difference between functions abs() and fabs()?</item>
    <item>68) What are formal parameters?</item>
    <item>69) What are control structures?</item>
    <item>70) Write a simple code fragment that will check if a number is positive or negative.</item>
    <item>71) When is a "switch" statement preferable over an "if" statement?</item>
    <item>72) What are global variables and how do you declare them?</item>
    <item>73) What are enumerated types?</item>
    <item>74) What does the function toupper() do?</item>
    <item>75) Is it possible to have a function as a parameter in another function?</item>
    <item>76) What are multidimensional arrays?</item>
    <item>77) Which function in C can be used to append a string to another string?</item>
    <item>78) What is the difference between functions getch() and getche()?</item>
    <item>79) Dothese two program statements perform the same output? 1) scanf("%c", &amp;letter);  2) letter=getchar()</item>
    <item>80) What are structure types in C?</item>
    <item>81) What does the characters "r" and "w" mean when writing programs that will make use of files?</item>
    <item>82) What is the difference between text files and binary files?</item>
    <item>83) is it possible to create your own header files?</item>
    <item>84) What is dynamic data structure?</item>
    <item>85) What are the different data types in C?</item>
    <item>86) What is the general form of a C program?</item>
    <item>87) What is the advantage of a random access file?</item>
    <item>88) In a switch statement, what will happen if a break statement is omitted?</item>

    <item>89) Describe how arrays can be passed to a user defined function</item>
    <item>90) What are pointers?</item>
    <item>91) Can you pass an entire structure to functions?</item>
    <item>92) What is gets() function?</item>
    <item>93) The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?</item>
    <item>94) How do you search data in a data file using random access method?</item>
    <item>95) Are comments included during the compilation stage and placed in the EXE file as well?</item>
    <item>96) Is there a built-in function in C that can be used for sorting data?</item>
    <item>97) What are the advantages and disadvantages of a heap?</item>
    <item>98) How do you convert strings to numbers in C?</item>
    <item>99) Create a simple code fragment that will swap the values of two variables num1 and num2.</item>
</string-array>
    <string-array name="cpp_interview">
        <item>Question 1: Briefly explain the concept of Inheritance in C++.</item>
        <item>Question 2: Define C++?</item>
        <item>Question 3: Can we call C++ as OOPS? and Why?</item>
        <item>Question 4: Define Class in C++?</item>
        <item>Question 5: Define Object in C++?</item>
        <item>Question 6: Define Encapsulation in C++?</item>
        <item>Question 7: What is an abstraction in C++?</item>
        <item>Question 8: What is the function of the keyword “Volatile”?</item>
        <item>Question 9: Define storage class in C++? Name some?</item>
        <item>Question 10: Can we have a recursive inline function in C++?</item>
        <item>Question 11: Define an Inline Function in C++? Write its syntax. Is it possible for the C++ compiler to ignore inlining?</item>
        <item>Question 12: Explain ‘this’ pointer?</item>
        <item>Question 13: Why do we need the Friend class and function?</item>
        <item>Question 14: Explain the significance of vTable and vptr in C++ and how the compiler deals with them</item>
        <item>Question 15: How is function overloading different from operator overloading?</item>
        <item>Question 16: Is it possible for a C++ program to be compiled without the main() function?</item>
        <item>Question 17: Draw a comparison between C++ and Java</item>
        <item>Question 18: Take a look at the following C++ program:</item>
        <item>Question 19: What will be the output?</item>
        <item>Question 20: What are the most important differences between C and C++?</item>
        <item>Question 21: Explain Virtual Functions and the concept of Runtime Polymorphism in C++ with a code example.</item>
        <item>Question 22: What differences separate structure from a class in C++?</item>
        <item>Question 23: What does a Static member in C++ mean?</item>
        <item>Question 24: Define access specifier and its various types in C++</item>
        <item>Question 25: Define the Copy Constructor used in C++ along with its general function prototype. Also, explain the various scenarios in which it is called.</item>
        <item>Question 26: Observe the following code snippet:
        \nint i = 5;
        \nint j = i++;
       \n After execution, what will be the value of i and j? Explain your answer.        </item>

        <item>Question 27: Take a look at the following two code examples for printing a vector:
Sample Code 1:
\nvector vec;
\n//* ... .. ... *//
\nfor (auto itr = vec.begin(); itr != vec.end(); itr++) {
\n  itr->print();
\n}
\nSample Code 2:
\nvector vec;
\n//* ... .. ... *//
\nfor (auto itr = vec.begin(); itr != vec.end(); ++itr) {
\n  itr->print();
}
         \n   Is there any advantage of using one over the other?</item>
        <item>Question 28: Suppose you have the GPA (Grade Point Average) of n number of students and you need to store and display it using C++. Can you write a program that accomplishes this?</item>
        <item>Question 29: What is a mutable storage class specifier? How can they be used?</item>
        <item>Question 30: What are the differences between a shallow copy and a deep copy?</item>
        <item>Question 31: Define an Abstract class in C++?</item>
        <item>Question 32: Define the Reference variable?</item>
        <item>Question 33: Can we have a String primitive data type in C++?</item>
        <item>Question 34: Can we use access specifiers to achieve data hiding in C++?</item>
        <item>Question 35: What is a destructor?</item>
        <item>Question 36: Can we overload a destructor?</item>
        <item>Question 37: What is the default constructor?</item>
        <item>Question 38: Can we provide one default constructor for our class?</item>
        <item>Question 39: What is the main difference between the keyword struct and class?</item>
        <item>Question 40: Define Block scope variable?</item>
        <item>Question 41: What are the functions of the scope resolution operator?</item>
        <item>Question 42: Define a namespace?</item>
        <item>Question 43: Define a class template?</item>
        <item>Question 44: What is the function of the keyword \"Auto\"?</item>
        <item>Question 45: Define a token in C++? Give examples?</item>
        <item>Question 46: What is the ‘diamond problem’ that occurs with multiple inheritance in C++? Explain using an example.</item>
    </string-array>
    <string-array name="php_interview">
        <item>Q 1) What is PHP?</item>
        <item>Q 2) Why do we use PHP?</item>
        <item>Q 3) Is PHP a strongly typed language?</item>
        <item>Q 4) What is meant by variable variables in PHP?</item>
        <item>Q 5) What are the differences between echo and print?</item>
        <item>Q 6) How can you execute PHP script from the command line?</item>
        <item>Q 7) How can you declare the array in PHP?</item>
        <item>Q 8) What are the uses of explode() and implode() functions?</item>
        <item>Q 9) Which function can be used to exit from the script after displaying the error message?</item>
        <item>Q 10) Which function is used in PHP to check the data type of any variable?</item>
        <item>Q 11) How can you increase the maximum execution time of a script in PHP?</item>
        <item>Q 12) What is meant by \'passing the variable by value and reference\' in PHP?</item>
        <item>Q 13) Explain type casting and type juggling.</item>
        <item>Q 14) How can you make a connection with MySQL server using PHP?</item>
        <item>Q 15) How can you retrieve data from the MySQL database using PHP?</item>
        <item>Q 16) What are the differences between mysqli_connect and mysqli_pconnect?</item>
        <item>Q 17) Which function is used in PHP to count the total number of rows returned by any query?</item>
        <item>Q 18) How can you create a session in PHP?</item>
        <item>Q 19) What is the use of imagetypes() method?</item>
        <item>Q 20) Which function you can use in PHP to open a file for reading or writing or for both?</item>
        <item>Q 21) What is the difference between include() and require()?</item>
        <item>Q 22) Which function is used in PHP to delete a file?</item>
        <item>Q 23) What is the use of strip_tags() method?</item>
        <item>Q 24) How can you send HTTP header to the client in PHP?</item>
        <item>Q 25) Which functions are used to count the total number of array elements in PHP?</item>
        <item>Q 26) What is the difference between substr() and strstr()?</item>
        <item>Q 27) How can you upload a file using PHP?</item>
        <item>Q 28) How can you declare a constant variable in PHP?</item>
        <item>Q 29) Which function is used in PHP to search a particular value in an array?</item>
        <item>Q 30) What is the use of $_REQUEST variable?</item>
        <item>Q 31) What is the difference between for and foreach loop in PHP?</item>
        <item>Q 32) Which operator is used to combine string values in PHP?</item>
        <item>Q 33) What is PEAR?</item>
        <item>Q 34) What type of errors can be occurred in PHP?</item>
        <item>Q 35) Does PHP support multiple inheritances?</item>
        <item>Q 36) What are the differences between session and cookie?</item>
        <item>Q 37) What is the use of mysqli_real_escape_string() function?</item>
        <item>Q 38) Which functions are used to remove whitespaces from the string?</item>
        <item>Q 39) What is a persistence cookie?</item>
        <item>Q 40) How can a cross-site scripting attack be prevented by PHP?</item>
        <item>Q 41) Which PHP global variable is used for uploading a file?</item>
        <item>Q 42) What is meant by public, private, protected, static and final scopes?</item>
        <item>Q 43) How can image properties be retrieved in PHP?</item>
        <item>Q 44) What is the difference between abstract class and interface?</item>
        <item>Q 45) What is garbage collection?</item>
        <item>Q 46) Which library is used in PHP to do various types of Image work?</item>
        <item>Q 47) What is URL rewriting?</item>
        <item>Q 48) What is PDO?</item>
    </string-array>
        <string-array name="java_interview">
            <item>Q1: What do you mean by Constructor?</item>
            <item>Q2: What are the features of Java?</item>
            <item>Q3: How does Java enable high performance?</item>
            <item>Q4: What do you understand by Java IDEs?</item>
            <item>Q5: Please explain Local variables and Instance variables in Java.</item>
            <item>Q6: What is an Object?</item>
            <item>Q7: Could you explain the Oops concepts?</item>
            <item>Q8: Please explain Method Overriding in Java?</item>
            <item>Q9: What do you mean by Overloading?</item>
            <item>Q10: Please explain the difference between String, String Builder, and String Buffer.</item>
            <item>Q11: What is Set in Java? Also, explain its types in a Java Collections.</item>
            <item>Q12: Please draw a comparison between notify() and notifyAll() methods.</item>
            <item>Q13: When is the Runnable interface preferred over thread class and vice-versa?</item>
            <item>Q14: Please explain the various types of garbage collectors in Java?</item>
            <item>Q15: How will you differentiate HashMap from HashTable?</item>
            <item>Q16: What do you mean by Collections in Java? What are the constituents of Collections in Java?</item>
            <item>Q17: Please explain Map and their types in Java.</item>
            <item>Q18: What do you mean by Priority Queue in Java?</item>
            <item>Q19: How is an Abstract class different from an Interface?</item>
            <item>Q20: Could you explain various types of Exceptions in Java? Also, tell us about the different ways of handling them.</item>
            <item>Q21: What role does the final keyword play in Java? What impact does it have on a variable, method, and class?</item>
            <item>Q22: How do you make a thread in Java? Give examples.</item>
            <item>Q23: Why do we use the yield() method?</item>
            <item>Q24: Can you explain the thread lifecycle in Java?</item>
            <item>Q25: Take a look at the two code snippets below:</item>
            <item>Q26: What do you understand by Synchronization in Java? What is its most significant disadvantage?</item>
            <item>Q27: Is it possible to write multiple catch blocks under a single try block?</item>
            <item>Q28: Can you tell the difference between execute(), executeQuery(), and executeUpdate()?</item>
            <item>Q29: Provide an example of Hibernate architecture:</item>
            <item>Q30: Could you demonstrate how to delete a cookie in JSP with a code example?</item>
            <item>Q31: Write suitable code examples to demonstrate the use of final, finally, and finalize.</item>
            <item>Q32: How does the throw keyword differ from the throws keyword?</item>
            <item>Q33: How will you distinguish processes from threads?</item>
            <item>Q34: Could you draw a comparison between Array and ArrayList?</item>
            <item>Q35: Please explain what do you mean by an Abstract class and an Abstract method?</item>
            <item>Q36: What do you know about Interface in Java?</item>
            <item>Q37: What is the join() method? Give an example.</item>
            <item>Q38: How do you make a thread stop in Java?</item>
            <item>Q39: What purpose do the Volatile variable serve in Java?</item>
            <item>Q40: Please compare Serialization with Deserialization in Java.</item>
            <item>Q41: What do you understand by OutOfMemoryError in Java?</item>
            <item>Q42: What is ordered and sorted concerning collections?</item>
            <item>Q43: Explain various exceptions handling keywords in Java?</item>
            <item>Q44: Explain exception propagation</item>
            <item>Q45: Explain public static void main(String args[ ]) in Java</item>
            <item>Q46: Java is a platform-independent language. Why?</item>
            <item>Q47: What are wrapper classes in Java?</item>
            <item>Q48: Explain the concept of boxing, unboxing, autoboxing, and auto unboxing.</item>
            <item>Q49: Explain Typecasting</item>
            <item>Q50: Explain different types of typecasting.</item>
            <item>Q51: Does an empty file name with .java extension a valid file name?</item>
            <item>Q52: Define the Singleton class in Java. How can a class be made Singleton?</item>
            <item>Q53: What if the public static void is replaced by static public void, will the program still run?</item>
            <item>Q54: What are the packages in Java? State some advantages of Packages in Java?</item>
            <item>Q55: Differentiate between == and equals() ?</item>
            <item>Q56: Why don/’t we use pointers in Java?</item>


        </string-array>

    <string-array name="python_interview">
        <item>Q1. What is the difference between list and tuples in Python?</item>
        <item>Q2. What are the key features of Python?</item>
        <item>Q3. What type of language is python? Programming or scripting?</item>
        <item>Q4.How is Python an interpreted language?</item>
        <item>Q5.What is pep 8?</item>
        <item>Q6. How is memory managed in Python?</item>
        <item>Q7. What is namespace in Python?</item>
        <item>Q8. What is PYTHONPATH?</item>
        <item>Q9. What are python modules? Name some commonly used built-in modules in Python?</item>
        <item>Q10.What are local variables and global variables in Python?</item>
        <item>Q11. Is python case sensitive?</item>
        <item>Q12.What is type conversion in Python?</item>
        <item>Q13. How to install Python on Windows and set path variable?</item>
        <item>Q14. Is indentation required in python?</item>
        <item>Q15. What is the difference between Python Arrays and lists?</item>
        <item>Q16. What are functions in Python?</item>
        <item>Q17.What is __init__?</item>
        <item>Q18.What is a lambda function?</item>
        <item>Q19. What is self in Python?</item>
        <item>Q20. How does break, continue and pass work?</item>
        <item>Q21. What does [::-1} do?</item>
        <item>Q22. How can you randomize the items of a list in place in Python?</item>
        <item>Q23. What are python iterators?</item>
        <item>Q24. How can you generate random numbers in Python?</item>
        <item>Q25. What is the difference between range and xrange?</item>
        <item>Q26. How do you write comments in python?</item>
        <item>Q27. What is pickling and unpickling?</item>
        <item>Q28. What are the generators in python?</item>
        <item>Q29. How will you capitalize the first letter of string?</item>
        <item>Q30. How will you convert a string to all lowercase?</item>
        <item>Q31. How to comment multiple lines in python?</item>
        <item>Q32.What are docstrings in Python?</item>
        <item>Q33. What is the purpose of is, not and in operators?</item>
        <item>Q34. What is the usage of help() and dir() function in Python?</item>
        <item>Q35. Whenever Python exits, why is not all the memory de-allocated?</item>
        <item>Q36. What is a dictionary in Python?</item>
        <item>Q37. How can the ternary operators be used in python?</item>
        <item>Q38. What does this mean: *args, **kwargs? And why would we use it?</item>
        <item>Q39. What does len() do?</item>
        <item>Q40. Explain split(), sub(), subn() methods of “re” module in Python.</item>
        <item>Q41. What are negative indexes and why are they used?</item>
        <item>Q42. What are Python packages?</item>
        <item>Q43.How can files be deleted in Python?</item>
        <item>Q44. What are the built-in types of python?</item>
        <item>Q45. What advantages do NumPy arrays offer over (nested) Python lists?</item>
        <item>Q46. How to add values to a python array?</item>
        <item>Q47. How to remove values to a python array?</item>
        <item>Q48. Does Python have OOps concepts?</item>
        <item>Q49. What is the difference between deep and shallow copy?</item>
        <item>Q50. How is Multithreading achieved in Python?</item>
        <item>Q51. What is the process of compilation and linking in python?</item>
        <item>Q52. What are Python libraries? Name a few of them.</item>
        <item>Q53. What is split used for?</item>
        <item>Q54. How to import modules in python?</item>
        <item>Q55. Explain Inheritance in Python with an example.</item>
        <item>Q56. How are classes created in Python? </item>
        <item>Q57. What is monkey patching in Python?</item>
        <item>Q58. Does python support multiple inheritance?</item>
        <item>Q59. What is Polymorphism in Python?</item>
        <item>Q60. Define encapsulation in Python?</item>
        <item>Q61. How do you do data abstraction in Python?</item>
        <item>Q62.Does python make use of access specifiers?</item>
        <item>Q63. How to create an empty class in Python? </item>
        <item>Q64. What does an object() do?</item>
        <item>Q65. Write a program in Python to execute the Bubble sort algorithm.</item>
        <item>Q66. Write a program in Python to produce Star triangle.</item>
        <item>Q67. Write a program to produce Fibonacci series in Python.</item>
        <item>Q68. Write a program in Python to check if a number is prime.</item>
        <item>Q69. Write a program in Python to check if a sequence is a Palindrome.</item>
        <item>Q70. Write a one-liner that will count the number of capital letters in a file. Your code should work even if the file is too big to fit in memory.</item>
    </string-array>
    <string-array name="python_ans">
       <item>Ans:
Python is an interpreted language. That means that, unlike languages like C and its variants, Python does not need to be compiled before it is run. Other interpreted languages include PHP and Ruby.
Python is dynamically typed, this means that you don’t need to state the types of variables when you declare them or anything like that. You can do things like x=111 and then x="I'm a string" without error
Python is well suited to object orientated programming in that it allows the definition of classes along with composition and inheritance. Python does not have access specifiers (like C++’s public, private).
In Python, functions are first-class objects. This means that they can be assigned to variables, returned from other functions and passed into functions. Classes are also first class objects
Writing Python code is quick but running it is often slower than compiled languages. Fortunately，Python allows the inclusion of C based extensions so bottlenecks can be optimized away and often are. The numpy package is a good example of this, it’s really quite quick because a lot of the number crunching it does isn’t actually done by Python
Python finds use in many spheres – web applications, automation, scientific modeling, big data applications and many more. It’s also often used as “glue” code to get other languages and components to play nice.
</item><item>Ans: Python is capable of scripting, but in general sense, it is considered as a general-purpose programming language. To know more about Scripting, you can refer to the Python Scripting Tutorial.

</item><item>Ans: An interpreted language is any programming language which is not in machine level code before runtime. Therefore, Python is an interpreted language.

</item><item>Ans: PEP stands for Python Enhancement Proposal. It is a set of rules that specify how to format Python code for maximum readability.

</item><item>Ans:
Memory management in python is managed by Python private heap space. All Python objects and data structures are located in a private heap. The programmer does not have access to this private heap. The python interpreter takes care of this instead.
The allocation of heap space for Python objects is done by Python/’s memory manager. The core API gives access to some tools for the programmer to code.
Python also has an inbuilt garbage collector, which recycles all the unused memory and so that it can be made available to the heap space.
</item><item>Ans: A namespace is a naming system used to make sure that names are unique to avoid naming conflicts.

</item><item>Ans: It is an environment variable which is used when a module is imported. Whenever a module is imported, PYTHONPATH is also looked up to check for the presence of the imported modules in various directories. The interpreter uses it to determine which module to load.

</item><item>Ans: Python modules are files containing Python code. This code can either be functions classes or variables. A Python module is a .py file containing executable code.

Some of the commonly used built-in modules are:

os
sys
math
random
data time
JSON
</item><item>Ans:
Global Variables:

Variables declared outside a function or in global space are called global variables. These variables can be accessed by any function in the program.

Local Variables:

Any variable declared inside a function is known as a local variable. This variable is present in the local space and not in the global space.

Example:

1
2
3
4
5
6
a=2
def add():
b=3
c=a+b
print(c)
add()
Output: 5

When you try to access the local variable outside the function add(), it will throw an error.

</item><item>Ans: Yes. Python is a case sensitive language.

</item><item>Ans: Type conversion refers to the conversion of one data type iinto another.

int() – converts any data type into integer type

float() – converts any data type into float type

ord() – converts characters into integer

hex() – converts integers to hexadecimal

oct() – converts integer to octal

tuple() – This function is used to convert to a tuple.

set() – This function returns the type after converting to set.

list() – This function is used to convert any data type to a list type.

dict() – This function is used to convert a tuple of order (key,value) into a dictionary.

str() – Used to convert integer into a string.

complex(real,imag) – This functionconverts real numbers to complex(real,imag) number.

</item><item>Ans: To install Python on Windows, follow the below steps:

Install python from this link: https://www.python.org/downloads/
After this, install it on your PC. Look for the location where PYTHON has been installed on your PC using the following command on your command prompt: cmd python.
Then go to advanced system settings and add a new variable and name it as PYTHON_NAME and paste the copied path.
Look for the path variable, select its value and select /‘edit/’.
Add a semicolon towards the end of the value if it/’s not present and then type %PYTHON_HOME%
</item><item>Ans: Indentation is necessary for Python. It specifies a block of code. All code within loops, classes, functions, etc is specified within an indented block. It is usually done using four space characters. If your code is not indented necessarily, it will not execute accurately and will throw errors as well.

</item><item>Ans: Arrays and lists, in Python, have the same way of storing data. But, arrays can hold only a single data type elements whereas lists can hold any data type elements.



</item><item>Ans: A function is a block of code which is executed only when it is called. To define a Python function, the def keyword is used.

Example:

1
2
3
def Newfunc():
print("Hi, Welcome to Edureka")
Newfunc(); #calling the function
Output: Hi, Welcome to Edureka

</item><item>Ans: __init__ is a method or constructor in Python. This method is automatically called to allocate memory when a new object/ instance of a class is created. All classes have the __init__ method.

Here is an example of how to use it.

1
2
3
4
5
6
7
8
9
10
11
class Employee:
def __init__(self, name, age,salary):
self.name = name
self.age = age
self.salary = 20000
E1 = Employee("XYZ", 23, 20000)
# E1 is the instance of class Employee.
#__init__ allocates memory for E1.
print(E1.name)
print(E1.age)
print(E1.salary)
Output:

XYZ

23

20000

</item><item>Ans: An anonymous function is known as a lambda function. This function can have any number of parameters but, can have just one statement.

Example:

1
2
a = lambda x,y : x+y
print(a(5, 6))
Output: 11

</item><item>Ans: Self is an instance or an object of a class. In Python, this is explicitly included as the first parameter. However, this is not the case in Java where it’s optional.  It helps to differentiate between the methods and attributes of a class with local variables.

The self variable in the init method refers to the newly created object while in other methods, it refers to the object whose method was called.</item>
    </string-array>
    <string-array name="java_sol">
        <item>
Ans: An Inner class is a class which is nested within another class. An Inner class has access rights for the class which is nesting it and it can access all variables and methods defined in the outer class.

A sub-class is a class which inherits from another class called super class. Sub-class can access all public and protected methods and fields of its super class.

</item>
        <item>
Ans: In Java, access specifiers are the keywords used before a class name which defines the access scope. The types of access specifiers for classes are:

1. Public : Class,Method,Field is accessible from anywhere.

2. Protected:Method,Field can be accessed from the same class to which they belong or from the sub-classes,and from the class of same package,but not from outside.

3. Default: Method,Field,class can be accessed only from the same package and not from outside of it is native package.

4. Private: Method,Field can be accessed from the same class to which they belong.

</item>
        <item>
Ans: When there is a requirement to share a method or a variable between multiple objects of a class instead of creating separate copies for each object, we use static keyword to make a method or variable shared for all objects.

</item><item>
Ans: Encapsulation is a concept in Object Oriented Programming for combining properties and methods in a single unit.

Encapsulation helps programmers to follow a modular approach for software development as each object has its own set of methods and variables and serves its functions independent of other objects. Encapsulation also serves data hiding purpose.



</item><item>
A singleton class in java can have only one instance and hence all its methods and variables belong to just one instance. Singleton class concept is useful for the situations when there is a need to limit the number of objects for a class.

The best example of singleton usage scenario is when there is a limit of having only one connection to a database due to some driver limitations or because of any licensing issues.

</item><item>
Ans: Looping is used in programming to execute a statement or a block of statement repeatedly. There are three types of loops in Java:

1) For Loops

For loops are used in java to execute statements repeatedly for a given number of times. For loops are used when number of times to execute the statements is known to programmer.

2) While Loops

While loop is used when certain statements need to be executed repeatedly until a condition is fulfilled. In while loops, condition is checked first before execution of statements.

3) Do While Loops

Do While Loop is same as While loop with only difference that condition is checked after execution of block of statements. Hence in case of do while loop, statements are executed at least once.

</item><item>Ans: An infinite loop runs without any condition and runs infinitely. An infinite loop can be broken by defining any breaking logic in the body of the statement blocks.

Infinite loop is declared as follows:

for (;;)
{
    // Statements to execute

    // Add any loop breaking logic
}
</item>


   <item>
    Ans: In java, float takes 4 bytes in memory while Double takes 8 bytes in memory. Float is single precision floating point decimal number while Double is double precision decimal number.

</item><item>
    Ans: In java, a constant is declared using the keyword Final. Value can be assigned only once and after assignment, value of a constant cannot be changed.
    <br>In below example, a constant with the name const_val is declared and assigned avalue: </br><br>
</br><br>Private Final int const_val=100</br><br>
</br><br>When a method is declared as final,it can NOT be overridden by the subclasses.This method are faster than any other method,because they are resolved at complied time.</br><br>
</br><br>When a class is declares as final,it cannot be subclassed. Example String,Integer and other wrapper classes.</br>
</item><item>
    Ans: Interfaces are slower in performance as compared to abstract classes as extra indirections are required for interfaces. Another key factor for developers to take into consideration is that any class can extend only one abstract class while a class can implement many interfaces.

    Use of interfaces also puts an extra burden on the developers as any time an interface is implemented in a class; developer is forced to implement each and every method of interface.

</item><item>
    Ans: In java, when a package is imported, its sub-packages are not imported and developer needs to import them separately if required.

    For example, if a developer imports a package university.*, all classes in the package named university are loaded but no classes from the sub-package are loaded. To load the classes from its sub-package ( say department), developer has to import it explicitly as follows:

    Import university.department.*

</item><item>
    Ans: In java, main method must be public static in order to run any application correctly. If main method is declared as private, developer will not get any compilation error however, it will not get executed and will give a runtime error.

</item><item>
    Ans: In java, we can pass argument to a function only by value and not by reference.

</item><item>
    Ans: In java, to convert an object into byte stream by serialization, an interface with the name Serializable is implemented by the class. All objects of a class implementing serializable interface get serialized and their state is saved in byte stream.

</item><item>
    Ans: Serialization is used when data needs to be transmitted over the network. Using serialization,  state of object is saved and converted into byte stream .The byte stream is transferred over the network and the object is re-created at destination.

</item><item>
    Ans: Try block needs to be followed by either Catch block or Finally block or both. Any exception thrown from try block needs to be either caught in the catch block or else any specific tasks to be performed before code abortion are put in the Finally block.

</item><item>
    Ans: If an exception is raised in Try block, control passes to catch block if it exists otherwise to finally block. Finally block is always executed when an exception occurs and the only way to avoid execution of any statements in Finally block is by aborting the code forcibly by writing following line of code at the end of try block:

    System.exit(0);
</item><item>
    Ans: Yes, a class can have multiple constructors with different parameters. Which constructor gets used for object creation depends on the arguments passed while creating the objects.

</item><item>
    Ans: We cannot override static methods. Static methods belong to a class and not to individual objects and are resolved at the time of compilation (not at runtime).Even if we try to override static method,we will not get an complitaion error,nor the impact of overriding when running the code.
</item><item>
    Ans: An array groups data of same primitive type and is static in nature while vectors are dynamic in nature and can hold data of different data types.

</item><item>
    Ans: Multi threading is a programming concept to run multiple tasks in a concurrent manner within a single program. Threads share same process stack and running in parallel. It helps in performance improvement of any program.

</item><item>
    Ans: Runnable interface is used in java for implementing multi threaded applications. Java.Lang.Runnable interface is implemented by a class to support multi threading.

</item><item>
    Ans: Multi threaded applications can be developed in Java by using any of the following two methodologies:

    1. By using Java.Lang.Runnable Interface. Classes implement this interface to enable multi threading. There is a Run() method in this interface which is implemented.

    2. By writing a class that extend Java.Lang.Thread class.

</item><item>
    Ans: Since StringBuffers are dynamic in nature and we can change the values of StringBuffer objects unlike String which is immutable, it is always a good choice to use StringBuffer when data is being changed too much. If we use String in such a case, for every data change a new String object will be created which will be an extra overhead.

</item><item>
    Ans: Break is used after each case (except the last one) in a switch so that code breaks after the valid case and does not flow in the proceeding cases too.

    If break is not used after each case, all cases after the valid case also get executed resulting in wrong results.

</item><item>
    Ans: In java, when an object is not referenced any more, garbage collection takes place and the object is destroyed automatically. For automatic garbage collection java calls either System.gc() method or Runtime.gc() method.

</item><item>
    Ans: If we want to execute any statements before even creation of objects at load time of class, we can use a static block of code in the class. Any statements inside this static block of code will get executed once at the time of loading the class even before creation of objects in the main method.
         </item>
    </string-array>

</resources>