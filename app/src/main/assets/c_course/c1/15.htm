<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>img{max-width:100%;}</style>

<title>Understanding
“volatile” qualifier in C</title></head>

<body lang=EN-US>

<div class=WordSection1>

<p class=MsoNormal style='margin-bottom:3.75pt;text-align:justify;line-height:
normal;background:white;vertical-align:baseline'><span lang=EN-IN
style='font-size:21.0pt;font-family:"Helvetica","sans-serif";color:black'>Understanding
“volatile” qualifier in C</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:7.5pt;margin-left:0in;
text-align:justify;background:white;vertical-align:baseline'><span lang=EN-IN
style='font-family:"Helvetica","sans-serif";color:black'>The volatile keyword
is intended to prevent the compiler from applying any optimizations on objects
that can change in ways that cannot be determined by the compiler.</span></p>

<p style='margin:0in;margin-bottom:.0001pt;text-align:justify;background:white;
vertical-align:baseline;font-variant-ligatures: normal;font-variant-caps: normal;
orphans: 2;widows: 2;-webkit-text-stroke-width: 0px;text-decoration-style: initial;
text-decoration-color: initial;word-spacing:0px'><span lang=EN-IN
style='font-family:"Helvetica","sans-serif";color:black'>Objects declared as
volatile are omitted from optimization because their values can be changed by
code outside the scope of current code at any time. The system always reads the
current value of a volatile object from the memory location rather than keeping
its value in temporary register at the point it is requested, even if a
previous instruction asked for a value from the same object. So the simple
question is, how can value of a variable change in such a way that compiler
cannot predict. Consider the following cases for answer to this question.<br>
</span><i><span lang=EN-IN style='font-size:11.5pt;font-family:"Helvetica","sans-serif";
color:black'><br>
<em><span style='font-family:"Helvetica","sans-serif"'>1) Global variables
modified by an interrupt service routine outside the scope:&nbsp;</span></em></span></i><span
lang=EN-IN style='font-family:"Helvetica","sans-serif";color:black'>For
example, a global variable can represent a data port (usually global pointer
referred as memory mapped IO) which will be updated dynamically. The code
reading data port must be declared as volatile in order to fetch latest data
available at the port. Failing to declare variable as volatile, the compiler
will optimize the code in such a way that it will read the port only once and keeps
using the same value in a temporary register to speed up the program (speed
optimization). In general, an ISR used to update these data port when there is
an interrupt due to availability of new data</span></p>

<p class=MsoNormal><span lang=EN-IN>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;vertical-align:baseline'><i><span lang=EN-IN style='font-size:11.5pt;
font-family:"Times New Roman","serif"'>2) Global variables within a
multi-threaded application:</span></i><span lang=EN-IN style='font-size:12.0pt;
font-family:"Times New Roman","serif"'>&nbsp;There are multiple ways for
threads communication, viz, message passing, shared memory, mail boxes, etc. A
global variable is weak form of shared memory. When two threads sharing
information via global variable, they need to be qualified with volatile. Since
threads run asynchronously, any update of global variable due to one thread
should be fetched freshly by another consumer thread. Compiler can read the
global variable and can place them in temporary variable of current thread
context. To nullify the effect of compiler optimizations, such global variables
to be qualified as volatile</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>If
we do not use volatile qualifier, the following problems may arise<br>
1) Code may not work as expected when optimization is turned on.<br>
2) Code may not work as expected when interrupts are enabled and used.</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Let
us see an example to understand how compilers interpret volatile keyword.
Consider below code, we are changing value of const object using pointer and we
are compiling code without optimization option. Hence compiler won’t do any
optimization and will change value of const object.</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=672
 style='width:7.0in;border-collapse:collapse'>
 <tr>
  <td width=672 style='width:7.0in;padding:0in 0in 0in 0in'>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>/*
  Compile code without optimization option */</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>#include
  &lt;stdio.h&gt; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>main(void) </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>{
  </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;const</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>local = 10; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>*ptr = (int*)
  &amp;local; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Initial
  value of local : %d \n&quot;, local); </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;*ptr
  = 100; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Modified
  value of local: %d \n&quot;, local); </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;return</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>0; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>}
  </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>When
we compile code with “–save-temps” option of gcc it generates 3 output files</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>1)
preprocessed code (having .i extention)<br>
2) assembly code (having .s extention) and<br>
3) object code (having .o option).</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>We
compile code without optimization, that’s why the size of assembly code will be
larger (which is highlighted in red color below).</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Output:</span></p>

<div style='border:solid #EDEDED 1.0pt;padding:8.0pt 8.0pt 8.0pt 8.0pt;
background:#E0E0E0'>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  [narendra@ubuntu]$
gcc volatile.c -o volatile –save-temps</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  [narendra@ubuntu]$
./volatile</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  Initial value of
local : 10</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  Modified value of
local: 100</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  [narendra@ubuntu]$
ls -l volatile.s</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  -rw-r–r– 1 narendra
narendra </span><span lang=EN-IN style='font-size:9.0pt;font-family:Consolas;
color:red'>731</span><span lang=EN-IN style='font-size:9.0pt;font-family:Consolas;
color:black'> 2016-11-19 16:19 volatile.s</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  [narendra@ubuntu]$</span></p>

</div>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Let
us compile same code with optimization option (i.e. -O option). In thr below
code, “local” is declared as const (and non-volatile), GCC compiler does
optimization and ignores the instructions which try to change value of const
object. Hence value of const object remains same.</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=672
 style='width:7.0in;border-collapse:collapse'>
 <tr>
  <td width=672 style='width:7.0in;padding:0in 0in 0in 0in'>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>/*
  Compile code with optimization option */</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>#include
  &lt;stdio.h&gt; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>main(void) </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>{
  </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;const</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>local = 10; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>*ptr = (int*)
  &amp;local; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Initial
  value of local : %d \n&quot;, local); </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;*ptr
  = 100; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Modified
  value of local: %d \n&quot;, local); </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;return</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>0; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>}
  </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-IN>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>For
above code, compiler does optimization, that’s why the size of assembly code
will reduce.</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Output:</span></p>

<div style='border:solid #EDEDED 1.0pt;padding:8.0pt 8.0pt 8.0pt 8.0pt;
background:#E0E0E0'>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  [narendra@ubuntu]$
gcc -O3 volatile.c -o volatile –save-temps</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  [narendra@ubuntu]$
./volatile</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  Initial value of
local : 10</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  Modified value of
local: 10</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  [narendra@ubuntu]$
ls -l volatile.s</span></p>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;background:
#E0E0E0;vertical-align:baseline;border:none;padding:0in'><span lang=EN-IN
style='font-size:9.0pt;font-family:Consolas;color:black'>  -rw-r–r– 1 narendra
narendra </span><span lang=EN-IN style='font-size:9.0pt;font-family:Consolas;
color:red'>626</span><span lang=EN-IN style='font-size:9.0pt;font-family:Consolas;
color:black'> 2016-11-19 16:21 volatile.s</span></p>

</div>

<p class=MsoNormal style='margin-bottom:7.5pt;line-height:normal;vertical-align:
baseline'><span lang=EN-IN style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Let
us declare const object as volatile and compile code with optimization option.
Although we compile code with optimization option, value of const object will
change, because variable is declared as volatile that means don’t do any
optimization.</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=672
 style='width:7.0in;border-collapse:collapse'>
 <tr>
  <td width=672 style='width:7.0in;padding:0in 0in 0in 0in'>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>/*
  Compile code with optimization option */</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>#include
  &lt;stdio.h&gt; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>main(void) </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>{
  </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;const</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>volatile</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>local = 10; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;int</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>*ptr = (int*)
  &amp;local; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Initial
  value of local : %d \n&quot;, local); </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;*ptr
  = 100; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Modified
  value of local: %d \n&quot;, local); </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;return</span><span
  style='font-size:10.0pt;font-family:"Times New Roman","serif";color:black'> </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>0; </span></p>
  <p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>}
  </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-IN>&nbsp;</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:7.5pt;margin-left:0in;
text-align:justify;background:white;vertical-align:baseline'><span lang=EN-IN
style='font-family:"Helvetica","sans-serif";color:black'>Output:</span></p>

<div style='border:solid #EDEDED 1.0pt;padding:8.0pt 8.0pt 8.0pt 8.0pt;
background:#E0E0E0'><pre style='margin-bottom:7.5pt;text-align:justify;
background:#E0E0E0;vertical-align:baseline;border:none;padding:0in;border-radius: 10px;
font-variant-ligatures: normal;font-variant-caps: normal;orphans: 2;widows: 2;
-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;
overflow:auto;word-spacing:0px'><span lang=EN-IN style='font-size:9.0pt;
font-family:Consolas;color:black'>  [narendra@ubuntu]$ gcc -O3 volatile.c -o volatile –save-temp</span></pre><pre
style='margin-bottom:7.5pt;text-align:justify;background:#E0E0E0;vertical-align:
baseline;border:none;padding:0in'><span lang=EN-IN style='font-size:9.0pt;
font-family:Consolas;color:black'>  [narendra@ubuntu]$ ./volatile</span></pre><pre
style='margin-bottom:7.5pt;text-align:justify;background:#E0E0E0;vertical-align:
baseline;border:none;padding:0in'><span lang=EN-IN style='font-size:9.0pt;
font-family:Consolas;color:black'>  Initial value of local : 10</span></pre><pre
style='margin-bottom:7.5pt;text-align:justify;background:#E0E0E0;vertical-align:
baseline;border:none;padding:0in'><span lang=EN-IN style='font-size:9.0pt;
font-family:Consolas;color:black'>  Modified value of local: 100</span></pre><pre
style='margin-bottom:7.5pt;text-align:justify;background:#E0E0E0;vertical-align:
baseline;border:none;padding:0in'><span lang=EN-IN style='font-size:9.0pt;
font-family:Consolas;color:black'>  [narendra@ubuntu]$ ls -l volatile.s</span></pre><pre
style='margin-bottom:7.5pt;text-align:justify;background:#E0E0E0;vertical-align:
baseline;border:none;padding:0in'><span lang=EN-IN style='font-size:9.0pt;
font-family:Consolas;color:black'>  -rw-r–r– 1 narendra narendra </span><span
lang=EN-IN style='font-size:9.0pt;font-family:Consolas;color:red'>711</span><span
lang=EN-IN style='font-size:9.0pt;font-family:Consolas;color:black'> 2016-11-19 16:22 volatile.s</span></pre><pre
style='margin-bottom:7.5pt;text-align:justify;background:#E0E0E0;vertical-align:
baseline;border:none;padding:0in'><span lang=EN-IN style='font-size:9.0pt;
font-family:Consolas;color:black'>  [narendra@ubuntu]$</span></pre></div>

<p style='margin-top:0in;margin-right:0in;margin-bottom:7.5pt;margin-left:0in;
text-align:justify;background:white;vertical-align:baseline;font-variant-ligatures: normal;
font-variant-caps: normal;orphans: 2;widows: 2;-webkit-text-stroke-width: 0px;
text-decoration-style: initial;text-decoration-color: initial;word-spacing:
0px'><span lang=EN-IN style='font-family:"Helvetica","sans-serif";color:black'>The
above example may not be a good practical example, the purpose was to explain
how compilers interpret volatile keyword. As a practical example, think of
touch sensor on mobile phones. The driver abstracting touch sensor will read the
location of touch and send it to higher level applications. The driver itself
should not modify (const-ness) the read location, and make sure it reads the
touch input every time fresh (volatile-ness). Such driver must read the touch
sensor input in const volatile manner.</span></p>

<p style='margin:0in;margin-bottom:.0001pt;text-align:justify;background:white;
vertical-align:baseline;font-variant-ligatures: normal;font-variant-caps: normal;
orphans: 2;widows: 2;-webkit-text-stroke-width: 0px;text-decoration-style: initial;
text-decoration-color: initial;word-spacing:0px'><strong><span lang=EN-IN
style='font-size:11.5pt;font-family:"Helvetica","sans-serif";color:black'>Note
:&nbsp;</span></strong><span lang=EN-IN style='font-family:"Helvetica","sans-serif";
color:black'>The above codes are compiler specific and may not work on all
compilers. The purpose of the examples is to make readers understand the
concept.</span></p>

<p class=MsoNormal><span lang=EN-IN>&nbsp;</span></p>

</div>

</body>

</html>
