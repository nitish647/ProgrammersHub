["/* * C# Program to Check whether the Entered Number is Even or Odd */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace check1 { class Program { static void Main ( string [] args ) { int i ; Console . Write ( Enter a Number :  ); i = int . Parse ( Console . ReadLine ()); if ( i % 2 == 0 ) { Console . Write ( Entered Number is an Even Number ); Console . Read (); } else { Console . Write ( Entered Number is an Odd Number ); Console . Read (); } } } } Program Explanation In this C# program, we are reading the number using ‘i’ integer variable. If condition statement is used to check the number is even and odd. For even number the modulus of the value of ‘i’ variable by 2 is equal to zero, if the condition is true then print the statement as even number. Otherwise, if the condition is false then execute the else statement, for odd number the modulus of the value of ‘i’ variable by 2 is not equal to zero, if the condition is true then execute the statement and print the statement as odd number. Runtime Test Cases Enter a Number : 25 Entered Number is an Odd Number ","/* * C# Program to Swap two Numbers */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Program { class Program { static void Main ( string [] args ) { int num1, num2, temp ; Console . Write (  n Enter the First Number :  ); num1 = int . Parse ( Console . ReadLine ()); Console . Write (  n Enter the Second Number :  ); num2 = int . Parse ( Console . ReadLine ()); temp = num1 ; num1 = num2 ; num2 = temp ; Console . Write (  n After Swapping :  ); Console . Write (  n First Number :  + num1 ); Console . Write (  n Second Number :  + num2 ); Console . Read (); } } } Program Explanation In this C# program, we are reading the numbers using ‘num1’ and ‘num2’ variables respectively. Interchange the values of the ‘num1’ and ‘num2’ variables using temporary variable ‘t’. Print the swapped value of 2 numbers. Runtime Test Cases Enter the First Number : 23 Enter the Second Number : 25 After Swapping : First Number : 25 Second Number : 23 ","/* * C# Program to Get a Number and Display the Sum of the Digits */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Program { class Program { static void Main ( string [] args ) { int num, sum = 0 ,r ; Console . WriteLine ( Enter a Number :  ); num = int . Parse ( Console . ReadLine ()); while ( num != 0 ) { r = num % 10 ; num = num / 10 ; sum = sum + r ; } Console . WriteLine ( Sum of Digits of the Number :  + sum ); Console . ReadLine (); } } } Program Explanation In this C# program, we are reading a number using ‘num’ variable. Using while loop computes the sum of the digits. The digit sum of a given integer is the sum of all its digits. Compute the modulus of the value of ‘num’ variable by 10. Divide the value of ‘num’ variable by 10. Compute the summation of the value of ‘sum’ variable with the value of ‘r’ variable. Print the sum of the digits. Runtime Test Cases Enter a Number : 123 Sum of Digits of the Number : 6 ","/* * C# Program to Get a Number and Display the Number with its Reverse */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Program { class Program { static void Main ( string [] args ) { int num, reverse = 0 ; Console . WriteLine ( Enter a Number :  ); num = int . Parse ( Console . ReadLine ()); while ( num != 0 ) { reverse = reverse * 10 ; reverse = reverse + num % 10 ; num = num / 10 ; } Console . WriteLine ( Reverse of Entered Number is :  + reverse ); Console . ReadLine (); } } } Program Explanation In this C# program, we are reading the number using ‘num’ variable. Multiply the value of ‘reverse’ variable by 10 and add this value of reverse variable with the modulus of the value of ‘reverse’ variable by 10. Compute the division of the value of ‘num’ variable by 10. Print the number with its reverse order. Runtime Test Cases Enter a Number : 123 Reverse of Entered Number : 321 ","/* * C# Program to Print a BinaryTriangle */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Program { class Program { public static void Main ( String [] args ) { int p, lastInt = 0 , input ; Console . WriteLine ( Enter the Number of Rows :  ); input = int . Parse ( Console . ReadLine ()); for ( int i = 1 ; i <= input ; i ++) { for ( p = 1 ; p <= i ; p ++) { if ( lastInt == 1 ) { Console . Write ( 0 ); lastInt = 0 ; } else if ( lastInt == 0 ) { Console . Write ( 1 ); lastInt = 1 ; } } Console . Write (  n  ); } Console . ReadLine (); } } } Program Explanation In this C# program, we are reading the number of rows using ‘input’ variable. Binary Triangle is a triangle formed with 1’s and 0’s. Number of rows in the binary triangle is obtained from the user. Nested-if else condition statement is used to check that the value of ‘lastInt’ variable is equal to 1. If the condition is true, then execute the statement print the value as 0. Runtime Test Cases Enter the Number of Rows : 5 1 01 010 1010 10101 ","/* * C# Program to Count the Number of 1's in the Entered Number */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace ConsoleApplication16 { class Program { static void Main ( string [] args ) { int m, count = 0 ; Console . WriteLine ( Enter the Limit :  ); m = int . Parse ( Console . ReadLine ()); int [] a = new int [ m ]; Console . WriteLine ( Enter the Numbers : ); for ( int i = 0 ; i < m ; i ++) { a [ i ]= Convert . ToInt32 ( Console . ReadLine ()); } foreach ( int o in a ) { if ( o == 1 ) { count ++; } } Console . WriteLine ( Number of 1's in the Entered Number :  ); Console . WriteLine ( count ); Console . ReadLine (); } } } Program Explanation In this C# program, we are reading the limit of the ‘array’ size. Using for loop enter the coefficient element values of an array. If condition statement, is used to check that the value of ‘i’ variable is equal to 1. If the condition is true then execute the statement and increment the value of the ‘count’ variable. Print the counted number of 1’s in the entered number. Runtime Test Cases Enter the Limit : 5 Enter the Numbers : 1 2 1 4 1 Number of 1's in the Entered Number : 3 ","/* * C# Program to Check Whether the Entered Year is a Leap Year or Not */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace Program { class leapyear { static void Main ( string [] args ) { leapyear obj = new leapyear (); obj . readdata (); obj . leap (); } int y ; public void readdata () { Console . WriteLine ( Enter the Year in Four Digits :  ); y = Convert . ToInt32 ( Console . ReadLine ()); } public void leap () { if (( y % 4 == 0 && y % 100 != 0 ) || ( y % 400 == 0 )) { Console . WriteLine ( {0} is a Leap Year ,y ); } else { Console . WriteLine ( {0} is not a Leap Year ,y ); } Console . ReadLine (); } } } Program Explanation In this C# program, we are reading the value of year using ‘year’ variable. When A year is divided by 4. If the remainder becomes 0, then the year is called a leap year. The Nested-If else condition statement is used to check the given year is leap year or not. In if condition statement the modulus of the value of ‘year’ variable by 4 is equal to 0, and the modulus of the value of ‘year’ variable by 100 is not equal to 0 using logical AND operators. Otherwise, if the condition is false, then execute the else if condition statement. Compute the modulus of the value of ‘year’ variable by 400 is equal to 0 using logical OR operators. If the condition is true then print the statement as leap year. Otherwise, if the condition is false then execute the else statement. Print the statement as not leap year. Runtime Test Cases Enter the Year in Four Digits : 1004 1004 is a Leap Year ","/* * C# Program to Display the Date in Various Formats */ using System ; namespace DateAndTime { class Program { static int Main () { DateTime date = new DateTime ( 2013 , 6 , 23 ); Console . WriteLine ( Some Date Formats :  ); Console . WriteLine ( Date and Time: {0} , date ); Console . WriteLine ( date . ToString ( yyyy-MM-dd )); Console . WriteLine ( date . ToString ( dd-MMM-yy )); Console . WriteLine ( date . ToString ( M/d/yyyy )); Console . WriteLine ( date . ToString ( M/d/yy )); Console . WriteLine ( date . ToString ( MM/dd/yyyy )); Console . WriteLine ( date . ToString ( MM/dd/yy )); Console . WriteLine ( date . ToString ( yy/MM/dd )); Console . Read (); return 0 ; } } } Program Explanation In this C# Program, we are creating the date object to the DateTime() constructor to get any date. The Date Format Specifier is used to represent a date in various ways. Representation of a date can be done by one of two Date Format Specifiers that is a Short Date Format Specifier or a Long Date Format Specifier. Runtime Test Cases Some Date Formats : Date and Time : 6/23/2013 12:00:00 AM 2013-06-23 23-Jun-13 6/23/2013 6/23/13 06/23/2013 06/23/13 13/06/23 ","/* * C# Program to Campare Two Dates */ using System ; namespace DateAndTime { class Program { static int Main () { DateTime sd = new DateTime ( 2010 , 10 , 12 ); Console . WriteLine ( Starting Date : {0} , sd ); DateTime ed = sd . AddDays ( 10 ); Console . WriteLine ( Ending Date : {0} , ed ); if ( sd < ed ) Console . WriteLine ( {0} Occurs Before {1} , sd, ed ); Console . Read (); return 0 ; } } } Program Explanation In this C# program, the DateTime() constructor is used to create the format of the date. If condition statement is used to compare the two dates and the date which occurs first is displayed. Runtime Test Cases Starting Date : 10/11/2010 12:00:00 AM Ending Date : 10/21/2010 12:00:00 AM 10/11/2010 12:00:00 Am Occurs Before 10/21/2010 12:00:00 AM ","/* * C# Program to Display the ATM Transaction */ using System ; class program { public static void Main () { int amount = 1000 , deposit, withdraw ; int choice, pin = 0 ,x = 0 ; Console . WriteLine ( Enter Your Pin Number  ); pin = int . Parse ( Console . ReadLine ()); while ( true ) { Console . WriteLine ( ********Welcome to ATM Service************** n  ); Console . WriteLine ( 1. Check Balance n  ); Console . WriteLine ( 2. Withdraw Cash n  ); Console . WriteLine ( 3. Deposit Cash n  ); Console . WriteLine ( 4. Quit n  ); Console . WriteLine ( ********************************************* nn  ); Console . WriteLine ( Enter your choice:  ); choice = int . Parse ( Console . ReadLine ()); switch ( choice ) { case 1 : Console . WriteLine (  n YOUR BALANCE IN Rs : {0}  , amount ); break ; case 2 : Console . WriteLine (  n ENTER THE AMOUNT TO WITHDRAW:  ); withdraw = int . Parse ( Console . ReadLine ()); if ( withdraw % 100 != 0 ) { Console . WriteLine (  n PLEASE ENTER THE AMOUNT IN MULTIPLES OF 100 ); } else if ( withdraw >( amount -500 )) { Console . WriteLine (  n INSUFFICENT BALANCE ); } else { amount = amount -withdraw ; Console . WriteLine (  nn PLEASE COLLECT CASH ); Console . WriteLine (  n YOUR CURRENT BALANCE IS {0} , amount ); } break ; case 3 : Console . WriteLine (  n ENTER THE AMOUNT TO DEPOSIT ); deposit = int . Parse ( Console . ReadLine ()); amount = amount + deposit ; Console . WriteLine ( YOUR BALANCE IS {0} , amount ); break ; case 4 : Console . WriteLine (  n THANK U USING ATM ); break ; } } Console . WriteLine (  nn THANKS FOR USING OUT ATM SERVICE ); } } Runtime Test Cases Enter Your Pin Number 123 ********Welcome to ATM Service************** 1. Check Balance 2. Withdraw Cash 3. Deposit Cash 4. Quit ********************************************* Enter your choice: 1 YOUR BALANCE IN Rs : 1000 ","/* * C# Program to Generate Random Numbers */ using System ; class Program { static void Main () { Console . WriteLine ( Some Random Numbers that are generated are :  ); for ( int i = 1 ; i < 10 ; i ++) { Randfunc (); } } static Random r = new Random (); static void Randfunc () { int n = r . Next (); Console . WriteLine ( n ); Console . ReadLine (); } } Program Explanation In this C# program using for loop we are calling the Randfun() function. Create the random variable object ‘r’, then using ‘n’ variable we are calling the next() function. Print the random numbers. Runtime Test Cases Some Random Numbers that are generated are : 1234567 8754352 9864930 8352048 1920472 2846104 7649207 4928756 9261746 ","/* * C# Program to Accept the Height of a Person & Categorize as * Tall, Dwarf or Average */ using System ; class program { public static void Main () { float height ; Console . WriteLine ( Enter the Height (in centimeters) n  ); height = int . Parse ( Console . ReadLine ()); if ( height < 150.0 ) Console . WriteLine ( Dwarf n  ); else if (( height >= 150.0 ) && ( height <= 165.0 )) Console . WriteLine (  Average Height n  ); else if (( height >= 165.0 ) && ( height <= 195.0 )) Console . WriteLine ( Taller n  ); else Console . WriteLine ( Abnormal height n  ); } } Runtime Test Cases Enter the Height (in centimeters) 165 Average Height ","/* * C# Program to Find the Frequency of the Word ʺ the ʺ in a given Sentence */ using System ; class program { public static void Main () { string s1 ; Console . WriteLine ( Enter the String :  ); s1 = Console . ReadLine (); Console . WriteLine ( counting . CountStringOccurrences ( s1, the )); Console . ReadLine (); } } public static class counting { public static int CountStringOccurrences ( string text, string pattern ) { int count = 0 ; int i = 0 ; while (( i = text . IndexOf ( pattern, i )) != -1 ) { i += pattern . Length ; count ++; } return count ; } } Runtime Test Cases Enter the String : we only loop once over the source, which reduces the cost of the method. 3 ","/* * C# Program to Swap the Contents of two Numbers using Bitwise XOR Operation */ using System ; class program { public static void Main () { int i, k ; Console . WriteLine ( Enter two integers n  ); i = int . Parse ( Console . ReadLine ()); k = int . Parse ( Console . ReadLine ()); Console . WriteLine (  n Before swapping i= {0} and k = {1} , i, k ); i = i ^ k ; k = i ^ k ; i = i ^ k ; Console . WriteLine (  n After swapping i= {0} and k = {1} , i, k ); Console . ReadLine (); } } Program Explanation In this C# Program, we are reading two integers using ‘i’ and ’k’ integer variables. The bitwise XOR operation is used between ‘i’ and ‘k’ integer variable values. Assign the value to ‘i’ variable and perform the bitwise XOR operation. And assign the value to ‘k’ variable and again to ‘i’ variable. Print the contents of two numbers using bitwise XOR operation. Runtime Test Cases Enter two integers 23 34 Before swapping i= 23 and k = 34 After swapping i= 34 and k = 23 ","/* * C# Program to Illustrate the Use of Access Specifiers */ using System ; namespace accessspecifier { class Program { static void Main ( string [] args ) { two B = new two (); B . show (); } } class one { private int x ; protected int y ; internal int z ; public int a ; protected internal int b ; } class two : one { public void show () { Console . WriteLine ( Values are :  ); //x=10; y = 20 ; z = 30 ; a = 40 ; b = 50 ; // Console.WriteLine(+x); // Error x is not accessible Console . WriteLine ( y ); Console . WriteLine ( z ); Console . WriteLine ( a ); Console . WriteLine ( b ); Console . ReadLine (); } } } Program Explanation This C# program is used to illustrate the use of access specifiers. Create the object variable to the class two. In class one, explain the four types of access specifiers by assigning values. Then we are displaying the output of the program. Runtime Test Cases Values are : 20 30 40 50 ","/* * C# Program to Print the Sum of all the Multiples of 3 and 5 */ using System ; class program { public static void Main () { int number, i, k, count = 1 ; Console . Write ( Enter number of rows n  ); number = int . Parse ( Console . ReadLine ()); count = number -1 ; for ( k = 1 ; k <= number ; k ++) { for ( i = 1 ; i <= count ; i ++) Console . Write (  ); count --; for ( i = 1 ; i <= 2 * k -1 ; i ++) Console . Write ( * ); Console . WriteLine (); } count = 1 ; for ( k = 1 ; k <= number -1 ; k ++) { for ( i = 1 ; i <= count ; i ++) Console . Write (  ); count ++; for ( i = 1 ; i <= 2 *( number -k )-1 ; i ++) Console . Write ( * ); Console . WriteLine (); } Console . ReadLine (); } } Runtime Test Cases Enter number of rows 3 * *** ***** *** * ","/* * C# Program to Illustrate LeftShift Operations */ using System ; class sample { public static void Main () { int x = 1024 * 1024 * 1024 ; uint p = 1024 * 1024 * 1024 ; int y =-42 ; Console . WriteLine ( LEFT SHIFT OPERATIONS : ); Console . WriteLine ( {0},{1},{2} , x, x * 2 ,x << 1 ); Console . WriteLine ( {0},{1},{2} , p, p * 2 ,p << 1 ); Console . WriteLine ( {0},{1},{2} , x, x * 4 ,x << 2 ); Console . WriteLine ( {0},{1},{2} , p, p * 4 ,p << 2 ); Console . WriteLine ( {0},{1},{2} , y, y * 1024 * 1024 * 64 ,x << 26 ); Console . ReadLine (); } } Program Explanation In this C# program, illustrate leftshift operations. Using ‘x’ integer and ‘p’ unsigned integer variable multiply 1024 value as thrice. Assign -42 values to ‘y’ integer variable. The shift operators allow programmers to adjust an integer by shifting all of its bits to the left or the right. Print the value using leftshift operations. Runtime Test Cases LEFT SHIFT OPERATIONS : 1073741824,-2147483648,-2147483648 1073741824,2147483648,2147483648 1073741824,0,0 1073741824,0,0 -42,1476395008,0 ","/* * C# Program to Check whether the given Integer has an * Alternate Pattern */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; class program { public static void Main () { int num, x, y, count = 0 ; Console . WriteLine ( Enter the Number: ); num = int . Parse ( Console . ReadLine ()); x = num << 1 ; y = x ^ num ; y = y + 1 ; while (( y / 2 ) != 0 ) { if ( y % 2 != 0 ) { count ++; break ; } else { y = y / 2 ; } } if ( count == 1 ) { Console . WriteLine ( false ); } else { Console . WriteLine ( true ); } Console . Read (); } } Runtime Test Cases Enter the Number: 100 false ","/* * C# Program to Read a Grade & Display the Equivalent Description */ using System ; using System.IO ; class program { public static void Main () { char grade ; Console . WriteLine ( Enter the Grade in UpperCase n  ); grade = Convert . ToChar ( Console . ReadLine ()); switch ( grade ) { case 'S' : Console . WriteLine (  SUPER ); break ; case 'A' : Console . WriteLine (  VERY GOOD ); break ; case 'B' : Console . WriteLine (  FAIR ); break ; case 'Y' : Console . WriteLine (  ABSENT ); break ; case 'F' : Console . WriteLine (  FAIL ); break ; default : Console . WriteLine ( ERROR IN GRADE n  ); break ; Console . ReadLine (); } } } Runtime Test Cases Enter the Grade in UpperCase A VERY GOOD ","/* * C# Program to Find Greatest among 2 numbers */ using System ; class prog { public static void Main () { int a, b ; Console . WriteLine ( Enter the Two Numbers :  ); a = Convert . ToInt32 ( Console . ReadLine ()); b = Convert . ToInt32 ( Console . ReadLine ()); if ( a > b ) { Console . WriteLine ( {0} is the Greatest Number ,a ); } else { Console . WriteLine ( {0} is the Greatest Number  ,b ); } Console . ReadLine (); } } Program Explanation In this C# program, we are finding the greatest value among 2 numbers. If else condition statement is used to compare the two numbers and print the greatest value among 2 numbers. Runtime Test Cases Enter the Two Numbers : 24 34 34 is the Greatest Number ","/* * C# Program to Display Squarefeet of a House */ using System ; class pgm { public static void Main () { int length, width, area ; Console . Write ( Enter length of room in feet:  ); length = Convert . ToInt32 ( Console . ReadLine ()); Console . Write ( Enter width of room in feet: ); width = Convert . ToInt32 ( Console . ReadLine ()); area = length * width ; Console . WriteLine ( Floor is  + area +  square feet. ); Console . ReadLine (); } } Program Explanation In this C# program, we are reading the length and width of the room using ‘length’ and ‘width’ variables respectively. Using the formula length * width the squarefeet is calculated and print the squarefeet of a house. Runtime Test Cases Enter Length of Room in Feet : 20 Enter width of Room in Feet : 20 Floor is 400 square feet. ","/* * C# Program to Create Sealed Class */ using System ; sealed class SealedClass { public int x ; public int y ; } class SealedTest { static void Main () { SealedClass sc = new SealedClass (); sc . x = 100 ; sc . y = 180 ; Console . WriteLine ( x = {0}, y = {1} , sc . x , sc . y ); Console . ReadLine (); } } Program Explanation In this C# program, we have already defined the values of ‘x’ and ‘y’ variable as 100 and 180 respectively. The sealed classes are used to restrict the inheritance feature of object oriented programming. Once a class is defined as a sealed class, this class cannot be inherited. Runtime Test Cases x = 100 ,y = 180 ","/* * C# Program to Perform Unboxing Operation */ using System ; class sample { int data ; void insert ( object x ) { data =( int ) x * 5 ; } object delete () { data = 0 ; return ( object ) data ; } public static void Main () { sample s = new sample (); s . insert ( 10 ); Console . WriteLine ( Data : {0} ,s . data ); Console . WriteLine ( Data : {0} ,s . delete ()); Console . ReadLine (); } } Runtime Test Cases Data : 50 Data : 0 ","/* * C# Program to Display All the Prime Numbers Between 1 to 100 */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace PrimeNumber { class Program { static void Main ( string [] args ) { bool isPrime = true ; Console . WriteLine ( Prime Numbers :  ); for ( int i = 2 ; i <= 100 ; i ++) { for ( int j = 2 ; j <= 100 ; j ++) { if ( i != j && i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { Console . Write (  t  + i ); } isPrime = true ; } Console . ReadKey (); } } } Runtime Test Cases Prime Numbers : 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 ","/* * C# Program to Accept a Number from the user and Display it * if it is Positive */ using System ; class program { public static void Main ( string [] args ) { Console . WriteLine ( Enter a number:  ); int number = Convert . ToInt32 ( Console . ReadLine ()); if ( number > 0 ) { Console . WriteLine ( Number is positive ); } else if ( number == 0 ) { Console . WriteLine ( Number is 0 ); } else { Console . WriteLine ( Number is negative ); } Console . ReadLine (); } } Runtime Test Cases Enter a Number : -4 Number is Negative ","/* * C# Program to Find Magnitude of Integer */ using System ; public class Program { public static void Main () { int num, mag = 0 ; Console . WriteLine ( Enter the Number :  ); num = int . Parse ( Console . ReadLine ()); Console . WriteLine ( Number:  + num ); while ( num > 0 ) { mag ++; num = num / 10 ; }; Console . WriteLine ( Magnitude:  + mag ); Console . Read (); } } Runtime Test Cases Enter the Number : 3145678 Number : 3145678 Magnitude : 7 ","/* * C# Program to Compute Average for the Set of Values */ using System ; class program { public static void Main () { int m, i, sum = 0 , avg = 0 ; Console . WriteLine ( Enter the Number of Terms in the Array  ); m = int . Parse ( Console . ReadLine ()); int [] a = new int [ m ]; Console . WriteLine ( Enter the Array Elements  ); for ( i = 0 ; i < m ; i ++) { a [ i ]= int . Parse ( Console . ReadLine ()); } for ( i = 0 ; i < m ; i ++) { sum += a [ i ]; } avg = sum / m ; Console . WriteLine ( Average is {0} , avg ); Console . ReadLine (); } } Program Explanation In this C# program, we are reading the number of terms in the array using ‘m’ variable. Then for loop is used to enter the coefficient element values of the array. Compute the values and divide the size of an array. Print the average for the set of values. Runtime Test Cases Enter the Number of Terms in the Array : 4 Enter the Elements 1 2 3 4 Average is 2 ","/* * C# Program to Display Numbers in the form of Triangle */ using System ; class Pascal { public static void Main () { int [ , ] arr = new int [ 8 , 8 ]; for ( int i = 0 ; i < 8 ; i ++) { for ( int k = 7 ; k > i ; k --) { //For loop to print spaces Console . Write (  ); } for ( int j = 0 ; j < i ; j ++) { if ( j == 0 || i == j ) { arr [ i, j ]= 1 ; } else { arr [ i, j ]= arr [ i -1 ,j ]+ arr [ i -1 ,j -1 ]; } Console . Write ( arr [ i, j ]+  ); } Console . WriteLine (); } Console . ReadLine (); } } Runtime Test Cases 1 11 121 1331 14641 15101051 1 6 15 20 15 6 1 ","/* * C# Program to Implement PhoneBook */ using System ; using System.Collections ; using System.IO ; class PhoneBook { static void Main ( string [] arg ) { Hashtable tab = new Hashtable (); string fileName ; if { ( arg . Length > 0 ) fileName = arg [ 0 ]; } else { fileName = phoneBook.txt ; } StreamReader r = File . OpenText ( fileName ); string line = r . ReadLine (); while ( line != null ) { int pos = line . IndexOf ( '=' ); string name = line . Substring ( 0 , pos ). Trim (); long phone = Convert . ToInt64 ( line . Substring ( pos + 1 )); tab [ name ]= phone ; line = r . ReadLine (); } r . Close (); for (; ; ) { Console . Write ( Name :  ); string name = Console . ReadLine (). Trim (); if ( name ==  ) break ; object phone = tab [ name ]; if ( phone == null ) Console . WriteLine ( -- Not Found in Phone Book ); else Console . WriteLine ( phone ); } } } Runtime Test Cases Name : Ram 9999945670 Name : Raj -- Not Found in Phone Book ","/* * C# Program to Implement for-each in Inteface */ using System ; using System.Collections ; class GrowableArray : IEnumerable { object [] a ; public GrowableArray ( int size ) { a = new object [ size ]; } public GrowableArray () : this ( 8 ) {} void Grow () { object [] b = new object [ 2 * a . Length ]; Array . Copy ( a, b, a . Length ); a = b ; } public object this [ int i ] { set { if ( i >= a . Length ) Grow (); a [ i ]= value ; } get { if ( i >= a . Length ) Grow (); return a [ i ]; } } public IEnumerator GetEnumerator () { return new GAEnumerator ( a ); } class GAEnumerator : IEnumerator { object [] a ; int i =-1 ; public GAEnumerator ( object [] a ){ this . a = a ;} public object Current { get { return a [ i ]; } } public void Reset () { i =-1 ; } public bool MoveNext () { do i ++; while ( i < a . Length && a [ i ] == null ); if ( i == a . Length ) return false ; else return true ; } } } class Test { public static void Main () { GrowableArray a = new GrowableArray ( 2 ); a [ 0 ]= 0 ; a [ 1 ]= 1 ; a [ 3 ]= 3 ; foreach ( object x in a ) Console . Write (  + x ); } } Runtime Test Cases Demonstrating foreach Interface by Displaying Numbers from 100 to 105 : 100 101 102 103 104 105 ","/* * C# Program to Calculate Acceleration using System; class program { static void Main(string[] args) { int v, t, acc; Console.WriteLine(Enter the Velocity : ); v = int.Parse(Console.ReadLine()); Console.WriteLine(Enter the Time : ); t = int.Parse(Console.ReadLine()); acc = v / t; Console.WriteLine(Acceleration : {0}, acc); } } Program Explanation In this C# Program, we are reading the velocity and time to compute the acceleration by using the formula Acceleration = velocity / time Runtime Test Cases Enter the Velocity : 10 Enter the Time : 2 Acceleration : 5 ","/* * C# Program to Find a Number using Pythagoras Theorem */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; class Program { static void Main ( string [] args ) { double a, b, c ; Console . WriteLine ( Enter the First Value  ); a = double . Parse ( Console . ReadLine ()); Console . WriteLine ( Enter the Second Value  ); b = double . Parse ( Console . ReadLine ()); c = Math . Sqrt ( a * a + b * b ); Console . WriteLine ( The Other Number is : {0} ,c ); Console . ReadLine (); } } Program Explanation In this C# Program, we are reading the first Value and second value using ‘a’ and ‘b’ variables respectively. The pythagoras theorem is used to find the other number. Multiply the value of ‘a’ variable with the value of ‘a’ variable and the value of ‘b’ variable with value of ‘b’ variable. Add both the multiplied value and take the square root of that value. Runtime Test Cases Enter the First Value 3 Enter the Second Value 4 The Other Number is : 5 ","/* * C# Program to Perform Division of Exponents of Same Base */ using System ; class Program { static void Main () { Console . WriteLine ( Enter the Base :  ); double num = double . Parse ( Console . ReadLine ()); Console . WriteLine ( Enter the First Exponent : ); double exp1 = double . Parse ( Console . ReadLine ()); Console . WriteLine ( Enter the Second Exponent : ); double exp2 = double . Parse ( Console . ReadLine ()); double div ; div = exp1 -exp2 ; Console . WriteLine ( Result is : {0}^{1} : {2} , num, div, Math . Pow ( num, div )); Console . ReadLine (); } } Program Explanation In this C# program, we are reading the base, the first and second exponent value using the variables ‘num’, ‘exp1’ and ‘exp2’ respectively. The ‘div’ variable is used to compute the difference between the first and second exponent values and the power value for all same bases is found. Print the division of exponents of same base. Runtime Test Cases Enter the Base : 2 Enter the First Exponent : 4 Enter the Second Exponent : 3 Result is : 2^1 : 2 ","/* * C# Program to Display Floyd's Triangle with an Numeric Mode */ using System ; class Program { static void Main ( string [] args ) { int i, j, k = 1 ; for ( i = 1 ; i <= 10 ; i ++) { for ( j = 1 ; j < i + 1 ; j ++) { Console . Write ( k ++ +  ); } Console . Write (  n  ); } Console . ReadLine (); } } Program Explanation This C# program is used to print Floyd’s triangle. Floyd’s triangle is a right-angled triangular array of natural numbers. It is defined by filling the rows of the triangle with consecutive numbers, starting with a 1 in the top left corner: 1. Number of rows of Floyd’s triangle to print is entered by the user. For loop is used to print Floyd’s triangle in a numeric mode. Runtime Test Cases 1 23 456 78910 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 ","/* * C# Program to Check Whether the Entered Number is an Armstrong Number or N ot */ using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; namespace ConsoleApplication6 { class Program { static void Main ( string [] args ) { int number, remainder, sum = 0 ; Console . Write ( enter the Number ); number = int . Parse ( Console . ReadLine ()); for ( int i = number ; i > 0 ; i = i / 10 ) { remainder = i % 10 ; sum = sum + remainder * remainder * remainder ; } if ( sum == number ) { Console . Write ( Entered Number is an Armstrong Number ); } else Console . Write ( Entered Number is not an Armstrong Number ); Console . ReadLine (); } } } Program Explanation In this C# program, we are reading the number using ‘i’ integer variable. If condition statement is used to check the number is even and odd. For even number the modulus of the value of ‘i’ variable by 2 is equal to zero, if the condition is true then print the statement as even number. Otherwise, if the condition is false then execute the else statement, for odd number the modulus of the value of ‘i’ variable by 2 is not equal to zero, if the condition is true then execute the statement and print the statement as odd number. Runtime Test Cases Enter the Number : 371 Entered Number is an Armstrong Number ","/* * C# Program to Perform Binary to Decimal Conversion */ using System ; using System.Collections.Generic ; using System.Text ; namespace Program { class Program { static void Main ( string [] args ) { int num, binary_val, decimal_val = 0 , base_val = 1 , rem ; Console . Write ( Enter a Binary Number(1s and 0s) :  ); num = int . Parse ( Console . ReadLine ()); /* maximum five digits */ binary_val = num ; while ( num > 0 ) { rem = num % 10 ; decimal_val = decimal_val + rem * base_val ; num = num / 10 ; base_val = base_val * 2 ; } Console . Write ( The Binary Number is :  + binary_val ); Console . Write (  n Its Decimal Equivalent is :  + decimal_val ); Console . ReadLine (); } } } Program Explanation In this C# program we are reading a binary number using ‘num’ variable. While loop is used to check the value of ‘num’ variable is greater than 0. If the condition is true then execute the iteration of the loop.Compute the modulus of the value of ‘num’ variable by 10 and assign the value to ‘rem’ variable. Multiply the value with the value of ‘baseval’ variable. Add the resulted value with the value of ‘decimal_val’ variable.Divide the value of ‘num’ variable by 10. Multiply the value of ‘base_val’ variable with 2 and assign the value to base_val variable. Print the decimal value of a binary number. Runtime Test Cases Enter a Binary Number(1s and 0s) : 101010 The Binary Number is : 101010 Its Decimal Equivalent is : 42 "]